---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
// import PostNavigation from '@/components/PostNavigation.astro'
import TableOfContents from '@/components/TableOfContents.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { parseAuthors } from '@/lib/server-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { type CollectionEntry, getCollection, render } from 'astro:content'


import { CardContent, Card } from '@/components/ui/card'
import {numberWithCommas} from "@/lib/utils"
// import LeadForm from "@/components/LeadForm.astro"

// import BlogCard from "@/components/BlogCard.astro"
// import { Input } from "@/components/ui/input"
// import { Label } from "@/components/ui/label"
// import { Textarea } from "@/components/ui/textarea"
import { components } from "@/mixins/autoImportComponents"
import TallyForm from '@/components/TallyForm'
// import Backlinks from '@/components/Backlinks.astro'


export async function getStaticPaths() {
  const posts = (await getCollection('services'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

type Props = CollectionEntry<'services'>

// const posts = (await getCollection('services'))
//   .filter((post) => !post.data.draft)
//   .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

// function getPostIndex(id: string): number {
//   return posts.findIndex((post) => post.id === id)
// }

// function getPrevPost(id: string): Props | null {
//   const postIndex = getPostIndex(id)
//   return postIndex !== -1 && postIndex < posts.length - 1
//     ? posts[postIndex + 1]
//     : null
// }

// function getNextPost(id: string): Props | null {
//   const postIndex = getPostIndex(id)
//   return postIndex > 0 ? posts[postIndex - 1] : null
// }

// const currentPostId = Astro.params.id
// const nextPost = getNextPost(currentPostId)
// const prevPost = getPrevPost(currentPostId)

const post = Astro.props

const { Content, headings } = await render(post)

const authors = await parseAuthors(post.data.authors ?? [])



---

<Layout
  title={post.data.aliases[0]}
  description={post.data.description}
  image={post.data.image?.src ?? '/static/daynetcafe.png'}
>
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(768px,100%)_minmax(0px,1fr)] gap-y-6 *:px-4"
  >
    <Breadcrumbs
      items={[
        { href: '/services', label: 'خدمات', icon: 'lucide:archive' },
        { label: post.data.aliases[0], icon: 'lucide:file-text' },
      ]}
      class="col-start-2"
    />
    {
      post.data.image && (
        <Image
          src={post.data.image}
          alt={post.data.aliases[0]}
          width={1200}
          height={630}
          class="col-span-full mx-auto w-full max-w-[1000px] object-cover"
        />
      )
    }
    <section class="col-start-2 flex flex-col gap-y-6 text-center">
      <div class="flex flex-col gap-y-6">
        <h1 class="leading-snug text-2xl sm:text-4xl font-bold">
          {post.data.aliases[0]}
        </h1>

        <div
          class="flex flex-wrap items-center justify-center gap-2 text-sm text-muted-foreground"
        >
          {
            authors.length > 0 && (
              <>
                <div class="flex items-center gap-x-2">
                  {authors.map((author) => (
                    <div class="flex items-center gap-x-1.5">
                      <Image
                        src={author.avatar}
                        alt={author.name}
                        width={24}
                        height={24}
                        class="rounded-full"
                      />
                      {author.isRegistered ? (
                        <Link
                          href={`/authors/${author.id}`}
                          underline
                          class="text-foreground"
                        >
                          <span>{author.name}</span>
                        </Link>
                      ) : (
                        <span>{author.name}</span>
                      )}
                    </div>
                  ))}
                </div>
                <Separator orientation="vertical" className="h-4" />
              </>
            )
          }
          <div class="flex items-center gap-2">
            <span>{formatDate(post.data.date)}</span>
            <Separator orientation="vertical" className="h-4" />
            <span>{readingTime(post.body!)}</span>
          </div>
        </div>
        <div class="flex flex-wrap justify-center gap-2">
          {
            post.data.tags && post.data.tags.length > 0 ? (
              post.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag}`}
                  class={badgeVariants({ variant: 'secondary' })}
                >
                  <Icon name="lucide:hash" class="size-3 -translate-x-0.5" />
                  {tag}
                </a>
              ))
            ) : (
              <span class="text-sm text-muted-foreground">
                هیچ تگی موجود نیست.
              </span>
            )
          }
        </div>
      </div>

      <!-- <PostNavigation prevPost={prevPost} nextPost={nextPost} /> -->
    </section>

    {headings.length > 0 && <TableOfContents headings={headings} />}

    <article
      class="prose prose-neutral col-start-2 max-w-none dark:prose-invert"
    >
      <Card>
          <CardContent>
              <div class="flex flex-col sm:flex-row text-center sm:text-right items-center gap-x-2 justify-between pt-8">
                <div>
                  <h2> 
                    <span class="text-sm font-light">شروع قیمت از: </span> <br /> {
                      post.data.price && numberWithCommas(post.data.price)
                    } ریال
                </h2>
                </div>
                <div class="flex flex-col gap-y-2">
                  <Button variant="default" size={'lg'}> <a class="not-prose" href={`#lead`} title="ثبت درخواست">ثبت درخواست</a> </Button>
                  <!-- <Button variant={"default"} size={'lg'}> <a class="not-prose" href={`tel:+989037371958`} title="تماس با ما">ثبت درخواست</a> </Button> -->
                  <!-- <Button variant={"default"} size={'lg'}> <a class="not-prose" href={`tel:+989037371958`} title="تماس با ما">0903-737-1958</a> </Button> -->
                  <!-- <Button variant="default" size={'lg'}> <a class="not-prose" href={`https://baserow.io/form/0XC-5e9IEx-wJKb88E9eOil5AIOTzG-UE-CoIiSTvCA?hide_url&prefill_url=${Astro.url.href}`} title="ثبت درخواست">ثبت درخواست</a> </Button> -->
                  
                
                </div>
              </div>
          </CardContent>
        </Card>

        <Content components={components} />

      <div class="my-8">
          <hr />

          <div><h2 id="lead">فرم ثبت درخواست</h2></div> 
          <p>برای دریافت این خدمت از کافی نت دی، لطفا فرم زیر را پر کنید.</p>
         
          <div class="h-full">
          <TallyForm formUrl=`https://tally.so/embed/n0D7BA?alignLeft=1&hideTitle=1&transparentBackground=1&dynamicHeight=1&service=${Astro.url.href}&servicename=${post.data.aliases[0]}` client:load />
          </div>




        </div>
    </article>

    <!-- <PostNavigation prevPost={prevPost} nextPost={nextPost} /> -->
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed bottom-8 right-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>


  <script>
  
  // import { actions } from 'astro:actions';
  
  document.addEventListener('astro:page-load', () => {

      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
      
    
      // const form = document.querySelector('form');

      // form?.addEventListener('submit', async (event) => {
      //   event.preventDefault();

        
      // const formData = new FormData(form);
      // const { error } = await actions.serviceRequest(formData);
      // if (!error) {
        
      //   alert("درخواست شما با موفقیت ثبت شد.")

      //   form.reset()      
      // } else {
      //   alert("مشکلی پیش آمده است. لطفا بعدا تلاش کنید.")
      // }

      // })
    
    
    })
  </script>
</Layout>
